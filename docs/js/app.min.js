!function($){"use strict";
//***************************************
// Main Application
// To get direct links to audio files in Google Drive:
// http://directlink.booogle.net/
//***************************************
angular.module("app",["ui.router","ngAnimate","chart.js"]).run(["$sce","$timeout","$rootScope","$state","$stateParams",function($sce,$timeout,$rootScope,$state,$stateParams){
// It's very handy to add references to $state and $stateParams to the
// $rootScope
$rootScope.$state=$state,$rootScope.$stateParams=$stateParams,$rootScope.cache={};var Airtable=require("airtable");$rootScope.Airtable=new Airtable({apiKey:"keyNIbNk17BU31gT8"}).base("appV6NqAqUOyQvJUW");
// Get the GrowthCalculator table
var items1=[];$rootScope.Airtable("GrowthCalculator").select({sort:[{field:"ID",direction:"asc"}]}).eachPage(function(records,fetchNextPage1){records.forEach(function(record){record.fields.id=record.id,items1.push(record.fields)}),fetchNextPage1()},function(error){$rootScope.growth=items1}),
// Helper function turns "C" (etc) into a number
$rootScope.getNumericalReadingLevel=function(textLevel){for(var num=0,i=0;i<$rootScope.growth.length&&$rootScope.growth[i].TextLevel!=textLevel;i++)num+=parseFloat($rootScope.growth[i].Growth);return num},
// Helper functions calculates where we are expected to be at a given date
// formula: {grade level} + {time of year} - {grade level equiv}
$rootScope.getExpectedTextLevel=function(gradeLevel,date,mastery,automaticallyAdd){
// Get % of school-year that is complete
// Note: months are -1 what you expect so 7 = August, 5 = June
var now=date,start=new Date(now.getFullYear(),7,14);start=start>now?new Date(now.getFullYear()-1,7,14):start;for(var end=new Date(start.getFullYear()+1,5,14),fraction=(now-start)/(end-start),gradeLevels=[],gradeKey=null,i=0;i<$rootScope.growth.length;i++)$rootScope.growth[i].GradeLevel==Math.floor(gradeLevel)&&(gradeKey=gradeKey?gradeKey:i,gradeLevels.push($rootScope.growth[i]));var key=Math.round(fraction*gradeLevels.length);
// If Mastery is Hard they are really one step back
// @todo: is this correct?
void 0!=mastery&&"Hard"===mastery&&key--,
// This is a hack to support the last quarter showing the first Level of the next year.
// (for all grades but Kinder)
void 0!=automaticallyAdd&&(key+=automaticallyAdd);
//console.log('fraction', fraction);
//var foundTextLevel = false;
var expectedTextLevel=null;for(i=0;i<$rootScope.growth.length;i++){var item=$rootScope.growth[i];
// if (i < gradeKey + key - 1) {
//   expected += parseFloat(item.Growth);
// }
i<gradeKey+key&&(expectedTextLevel=item.TextLevel)}return expectedTextLevel}}]).config(["$locationProvider","$stateProvider","$urlRouterProvider",function($locationProvider,$stateProvider,$urlRouterProvider){
/////////////////////////////
// Redirects and Otherwise //
/////////////////////////////
// Use $urlRouterProvider to configure any redirects (when) and invalid
// urls (otherwise).
$urlRouterProvider.when("/admin","/admin/students"),
//.otherwise(token ? '/sites' : '/start');
//////////////////////////
// State Configurations //
//////////////////////////
$stateProvider.state("students",{url:"/admin/students/:query",templateUrl:"views/students.html",
// auth: true,
/*resolve: {
                cards: function ($stateParams, $rootScope, $http) {

                }
            },*/
controller:function($scope,$rootScope,$state,$filter,$http){$rootScope.showAdmin=!0;var data=[];$rootScope.Airtable("Students").select({sort:[{field:"LastName",direction:"asc"}]}).eachPage(function(records,fetchNextPage){records.forEach(function(record){record.fields.id=record.id,data.push(record.fields)}),fetchNextPage()},function(error){for(var now=new Date,i=0;i<data.length;i++){var expected=$rootScope.getExpectedTextLevel(data[i].Grade,now);expected=$rootScope.getNumericalReadingLevel(expected);var current=$rootScope.getNumericalReadingLevel(data[i].TextLevel);data[i].Closeness=current-expected,data[i].Copied=!!data[i].NeedToEnter&&data[i].NeedToEnter}$scope.students=data,$scope.$apply()}),$rootScope.query=$state.params.query,$scope.setSort=function(key,e){return key?(e.preventDefault(),key=key.replace(/ /g,"+"),void($scope.order=$scope.order==key?"-"+key:key)):void($scope.order=["Closeness","LastAssessment"])},$scope.setSort(),$scope.checkall=!1,$scope.checkallClick=function(){for(var arr=$filter("filter")($scope.students,$scope.query),i=0;i<arr.length;i++)arr[i].selected=$scope.checkall},$scope.print=function(){for(var students=[],i=0;i<$scope.students.length;i++)$scope.students[i].selected&&students.push($scope.students[i].id);students.length>10&&!confirm("Printing over 10 students at a time doesn't always work.  If you run in to issues, wait one minute, click Back, and refresh the page. \n\n Are you sure you want to continue?")||students.length&&$state.go("printAssessment",{students:students.join(",")})},$scope.clickNeedToEnter=function(student){var studentEdit={NeedToEnter:student.NeedToEnter};console.log(studentEdit),$rootScope.Airtable("Students").update(student.id,studentEdit,function(err,record){if(err)return console.log(err),void alert("There was an error updating the Student profile.")})}}}),$stateProvider.state("studentsChart",{url:"/admin/chart/:query",templateUrl:"views/students-chart.html",
// auth: true,
/*resolve: {
                cards: function ($stateParams, $rootScope, $http) {

                }
            },*/
controller:function($scope,$rootScope,$state,$filter,$http){$rootScope.showAdmin=!0,$rootScope.query=$state.params.query;var calculate=function(students){$scope.query&&$scope.query.length&&(students=$filter("filter")(students,$scope.query));for(var labels=[],data=[],colors=[],i=0;i<students.length;i++)null!=students[i].Closeness&&(labels.push(students[i].FirstName+" "+students[i].LastName+" "+students[i].LastAssessment),data.push(students[i].Closeness),colors.push(students[i].Closeness<0?"#f7464a":"#3c763d"));$scope.labels=labels,$scope.data=data,$scope.colors=colors},data=[];$rootScope.Airtable("Students").select({sort:[{field:"LastAssessment",direction:"asc"}]}).eachPage(function(records,fetchNextPage){records.forEach(function(record){record.fields.id=record.id,data.push(record.fields)}),fetchNextPage()},function(error){for(var now=new Date,i=0;i<data.length;i++){var expected=$rootScope.getExpectedTextLevel(data[i].Grade,now);expected=$rootScope.getNumericalReadingLevel(expected);var current=$rootScope.getNumericalReadingLevel(data[i].TextLevel);data[i].Closeness=precisionRound(current-expected,2),data[i].Copied=!!data[i].NeedToEnter&&data[i].NeedToEnter}$scope.students=data,calculate(data),$scope.$apply()});var precisionRound=function(number,precision){var factor=Math.pow(10,precision);return Math.round(number*factor)/factor};$scope.updateQuery=function(){calculate($scope.students,$scope.query)}}}).state("editAssessment",{url:"/admin/student/:student",template:'<div assessment edit="true" type="type" student="student"></div>',controller:function($scope,$rootScope,$state,$filter,$http){$rootScope.showAdmin=!0,$scope.type=$state.params.type,$scope.student=$state.params.student}}).state("viewAssessment",{url:"/student/:student",template:'<div assessment type="type" student="student"></div>',controller:function($scope,$rootScope,$state,$filter,$http){$scope.type=$state.params.type,$scope.student=$state.params.student}}).state("printAssessment",{url:"/print/:students",templateUrl:"views/print.html",controller:function($scope,$rootScope,$state,$filter,$http){var students=$state.params.students.split(",");$scope.total=students.length,$scope.words="words",$scope.letters="letters",$scope.students=students}})}]),angular.module("app").directive("assessment",function($rootScope,$state,$sce,$timeout){return{restrict:"A",replace:!0,transclude:!0,scope:{type:"=",student:"=",assessment:"=",edit:"=",print:"@"},templateUrl:"views/assessment.html",link:function($scope,$element,$attrs,$window){function drawChart(){function drawCurveTypes(){var data=new google.visualization.DataTable;data.addColumn("date","Date"),data.addColumn("number","Reading Level"),data.addColumn("number","Expected"),
// Add expected values, starting with one for the beginning of the year
data.addRow([new Date($scope.quarters[0].LastDay.replace("10","08")),null,parseInt($scope.student.Grade)]);for(var i=0;i<$scope.quarters.length;i++)data.addRow([new Date($scope.quarters[i].LastDay),null,(i+1)/4+parseInt($scope.student.Grade)]);
// Add assessments
var rows=[];for(i=0;i<$scope.assessments.length;i++)if("Hard"!==$scope.assessments[i].Mastery){var date=new Date($scope.assessments[i].Date),level=$rootScope.getNumericalReadingLevel($scope.assessments[i].TextLevel);0!=rows.length&&rows[rows.length-1][0].getTime()===date.getTime()?rows[rows.length-1][1]=rows[rows.length-1][1]>level?rows[rows.length-1][1]:level:rows.push([date,level,null])}data.addRows(rows);var options={
// vAxis: {
//   title: 'Reading Level'
// },
series:{1:{curveType:"function"},2:{curveType:"function"}},chartArea:{left:40,top:10,width:"80%",height:"90%"},legend:{position:"top right"}},chart=new google.visualization.LineChart(document.getElementById("chart_div"));chart.draw(data,options)}$scope.assessments&&$scope.quarters&&(google.charts.load("current",{packages:["corechart","line"]}),google.charts.setOnLoadCallback(drawCurveTypes))}function scrollToAssessment(){$timeout(function(){jQuery("html, body").animate({scrollTop:jQuery("#assessment").offset().top-50},500)},10)}if($scope.show=!1,$scope.showAllAssessments=$scope.edit,$scope.showChart=!0,$timeout(function(){$scope.link=window.location.href.replace("/admin","")},0),void 0==$rootScope.cache.GrowthCalculator){var items1=[];$rootScope.Airtable("GrowthCalculator").select({sort:[{field:"ID",direction:"asc"}]}).eachPage(function(records,fetchNextPage1){records.forEach(function(record){record.fields.id=record.id,items1.push(record.fields)}),fetchNextPage1()},function(error){$rootScope.cache.GrowthCalculator=items1,$scope.growth=items1,$scope.$apply()})}else $scope.growth=$rootScope.cache.GrowthCalculator;var calculateQuarters=function(assessment,assessments){for(var quarters=$scope.quarters,last=0,i=0;i<quarters.length;i++){
// This is a hack to support the last quarter showing the first Level of the next year.
// (for all grades but Kinder)
var automaticallyAdd=i==quarters.length-1&&0!=$scope.student.Grade?1:0;quarters[i].expectedTextLevel=$rootScope.getExpectedTextLevel($scope.student.Grade,new Date(quarters[i].LastDay),null,automaticallyAdd),
// Add assessments
quarters[i].assessment=null;for(var j=last;j<assessments.length;j++)assessments[j].Date<=quarters[i].LastDay&&"Hard"!==assessments[j].Mastery&&(quarters[i].assessment=assessments[j],last=j+1)}
//console.log('quarters', quarters);
$scope.quarters=quarters,$scope.$apply(),drawChart()},getStudents=function(cb,assessment){var studentID="string"==typeof $scope.student?$scope.student:$scope.student.id;$rootScope.Airtable("Students").find(studentID,function(err,record){record.fields.id=record.id,$scope.student=record.fields,$scope.show=!$scope.print,$scope.$apply();var assessments=[];
//var disabledItems = {};
$rootScope.Airtable("Assessments").select({filterByFormula:'{Student} = "'+record.fields.ID+'"',sort:[{field:"Date",direction:"asc"}]}).eachPage(function(records,fetchNextPage){records.forEach(function(record){record.fields.id=record.id,assessments.push(record.fields)}),fetchNextPage()},function(error){
// Get the Quarters
if($scope.show=!!assessments.length,$scope.assessments=assessments,assessments.length||$scope.newAssessment(),void 0==$rootScope.cache.Quarters){var items0=[];$rootScope.Airtable("Quarters").select({sort:[{field:"Name",direction:"asc"}]}).eachPage(function(records0,fetchNextPage0){records0.forEach(function(record){record.fields.id=record.id,items0.push(record.fields)}),fetchNextPage0()},function(error){$rootScope.cache.Quarters=items0,$scope.quarters=items0,$scope.$apply(),cb&&cb(assessment,assessments)})}else $scope.quarters=$rootScope.cache.Quarters,cb&&cb(assessment,assessments);$scope.$apply()})})};getStudents(calculateQuarters),$scope.toggleAllAssessments=function(){$scope.showAllAssessments=!$scope.showAllAssessments},$scope.toggleChart=function(){$scope.showChart=!$scope.showChart},$scope.newAssessment=function(){$scope.assessment={Student:[$scope.student],Grade:$scope.student.Grade,Date:new Date,Genre:"Fiction",TextLevel:"",ExpectedTextLevel:"",Accuracy:null,Comprehension:null,Fluency:null,Mastery:"Instructional",Closeness:"",Notes:""},scrollToAssessment()},$scope.clickAssessment=function(item,e){if(e.preventDefault(),$scope.edit){if($scope.assessment&&item.id==$scope.assessment.id)$scope.assessment=null;else for(var j=0;j<$scope.assessments.length;j++)$scope.assessments[j].id==item.id&&($scope.assessments[j].Date=new Date($scope.assessments[j].Date),$scope.assessment=$scope.assessments[j]);scrollToAssessment()}},$scope.updateCloseness=function(){if($scope.assessment.TextLevel=$scope.assessment.TextLevel.toUpperCase(),!($scope.growth.length&&$scope.assessment.TextLevel&&$scope.assessment.Date&&$scope.assessment.Mastery&&"Hard"!==$scope.assessment.Mastery))return $scope.assessment.GrowthLevel=null,$scope.assessment.Closeness=null,$scope.assessment.GradeLevel=null,void($scope.assessment.ExpectedTextLevel=null);var current=$rootScope.getNumericalReadingLevel($scope.assessment.TextLevel),expectedTextLevel=$rootScope.getExpectedTextLevel($scope.student.Grade,new Date($scope.assessment.Date),$scope.assessment.Mastery),expected=$rootScope.getNumericalReadingLevel(expectedTextLevel);$scope.assessment.GrowthLevel=current,$scope.assessment.Closeness=current-expected,$scope.assessment.GradeLevel=Math.floor(current),$scope.assessment.ExpectedTextLevel=expectedTextLevel},$scope.cancelAssessment=function(){$scope.assessment=null},$scope.deleteAssessment=function(id){$rootScope.Airtable("Assessments").destroy(id,function(err,record){return err?(alert("There was a problem deleting this assessment!"),void console.error(err)):($scope.assessment=null,void getStudents(saveAssessmentLoadedCallback,null))})},$scope.saveAssessment=function(assessment){if(assessment.id){var id=assessment.id;delete assessment.id,delete assessment.ID,delete assessment.$$hashKey,
//console.log('Update assessment', assessment);
$rootScope.Airtable("Assessments").update(id,assessment,function(err,record){return err?(alert("There was a problem saving this assessment!"),void console.error(err)):($scope.assessment=null,void getStudents(saveAssessmentCallback,assessment))})}else assessment.Date=new Date(assessment.Date).toISOString().slice(0,10),assessment.Student[0]="object"==typeof assessment.Student[0]?assessment.Student[0].id:assessment.Student[0],
//console.log('Create assessment', assessment);
$rootScope.Airtable("Assessments").create(assessment,function(err,record){return err?(alert("There was a problem saving this assessment!"),void console.log(err)):($scope.assessment=null,void getStudents(saveAssessmentCallback,$scope.assessments))})};var saveAssessmentCallback=function(assessment,assessments){getStudents(saveAssessmentLoadedCallback)},saveAssessmentLoadedCallback=function(assessment,assessments){
// Get the last non-Hard assessment
assessments=assessments.length?assessments:[{LastAssessment:""}],assessment=assessments.length?assessments[assessments.length-1]:assessments[0],"Hard"===assessment.Mastery&&assessments.length>1&&(assessment=assessments[assessments.length-2]),"Hard"===assessment.Mastery&&assessments.length>2&&(assessment=assessments[assessments.length-3]);var studentEdit={};studentEdit.LastAssessment=void 0!==assessment.Date?assessment.Date:null,studentEdit.Closeness=void 0!==assessment.Closeness?assessment.Closeness:null,studentEdit.Accuracy=void 0!==assessment.Accuracy?assessment.Accuracy:null,studentEdit.Comprehension=void 0!==assessment.Comprehension?assessment.Comprehension:null,studentEdit.Fluency=void 0!==assessment.Fluency?assessment.Fluency:null,studentEdit.Notes=void 0!==assessment.Notes?assessment.Notes:null,studentEdit.Mastery=void 0!==assessment.Mastery?assessment.Mastery:null,studentEdit.TextLevel=void 0!==assessment.TextLevel?assessment.TextLevel:null,studentEdit.Genre=void 0!==assessment.Genre?assessment.Genre:null,studentEdit.AnnualGrowth=void 0===assessment.GrowthLevel||null===assessment.GrowthLevel?null:assessment.GrowthLevel-assessments[0].GrowthLevel,
//console.log('saving', studentEdit);
$rootScope.Airtable("Students").update($scope.student.id,studentEdit,function(err,record){return err?(console.log(err),void alert("There was an error updating the Student profile.  Your assessment was saved properly, but the Last Assessment and Closeness values in the Student List may not be correct.")):(calculateQuarters(assessment,assessments),void($scope.assessment=null))})}}}})}(jQuery);